#version 400 core

in vec3 vertexPosition;
in vec2 textureCoordinate;
in vec3 normalVector;

const int MAX_LIGHTS = 10;

out vec2 pass_uvCoordinate;
out vec3 surfaceNormal;
out vec3 toLightVector[MAX_LIGHTS];

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[MAX_LIGHTS];

void main(void)
{
	vec4 worldPosition = transformationMatrix * vec4(vertexPosition, 1.0);
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	pass_uvCoordinate = textureCoordinate;
	surfaceNormal = (transformationMatrix * vec4(normalVector, 0.0)).xyz;
	
	for (int i = 0; i < MAX_LIGHTS; i++) {
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
}